<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>链表</title>
      <link href="/2024/06/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/06/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h1><h2 id="1-1-链表的定义"><a href="#1-1-链表的定义" class="headerlink" title="1.1 链表的定义"></a>1.1 链表的定义</h2><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2Fe9d58d32ef6cdfa7fdd0909fe45efc30-image-20240414214349578.png" alt="image-20240414214349578" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表、C++</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;  <span class="comment">// 节点上存储的元素</span></span><br><span class="line">    ListNode *next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;  <span class="comment">// 节点的构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="comment">// 结点的值</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一个结点</span></span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(无参)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有一个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有两个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-查找节点"><a href="#1-2-查找节点" class="headerlink" title="1.2 查找节点"></a>1.2 查找节点</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在链表中查找值为 target 的首个节点</span></span><br><span class="line"><span class="comment">//c++</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(ListNode *head, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head-&gt;val == target)</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-插入节点"><a href="#1-3-插入节点" class="headerlink" title="1.3 插入节点"></a>1.3 插入节点</h2><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2F82ba2f7df4c03fc8aa28e5cf6d577ddd-image-20240414212922984.png" alt="image-20240414212922984" style="zoom: 43%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在链表的节点 n0 之后插入节点 P</span></span><br><span class="line"><span class="comment">//c++</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(ListNode *n0, ListNode *P)</span> </span>&#123;</span><br><span class="line">    ListNode *n1 = n0-&gt;next;</span><br><span class="line">    P-&gt;next = n1;</span><br><span class="line">    n0-&gt;next = P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(ListNode n0, ListNode P)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">n1</span> <span class="operator">=</span> n0.next;</span><br><span class="line">    P.next = n1;</span><br><span class="line">    n0.next = P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-删除节点"><a href="#1-4-删除节点" class="headerlink" title="1.4 删除节点"></a>1.4 删除节点</h2><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2F6806c71edaeb49b095b41545d388b52b-image-20240414213941801.png" alt="image-20240414213941801" style="zoom:45%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 删除链表的节点 n0 之后的首个节点 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(ListNode *n0)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n0-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// n0 -&gt; P -&gt; n1</span></span><br><span class="line">    ListNode *P = n0-&gt;next;</span><br><span class="line">    ListNode *n1 = P-&gt;next;</span><br><span class="line">    n0-&gt;next = n1;</span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="keyword">delete</span> P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-移除链表元素"><a href="#2-移除链表元素" class="headerlink" title="2. 移除链表元素"></a>2. 移除链表元素</h1><p>题目链接：<a href="https://leetcode.cn/problems/remove-linked-list-elements/">LeetCode 203. 移除链表元素</a></p><p>题目：给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2F00851ad56d7f5029ad1b4ee74d69e242-image-20240414223157375.png" alt="image-20240414223157375" style="zoom:50%;" /><h2 id="2-1-暴力法"><a href="#2-1-暴力法" class="headerlink" title="2.1 暴力法"></a>2.1 暴力法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果目标数与首元节点数据相同，删除头节点；头指针后移</span></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">nullptr</span> &amp;&amp; head-&gt;val == val)&#123;</span><br><span class="line">            ListNode* temp = head;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next-&gt;val == val)&#123;</span><br><span class="line">                ListNode* temp = cur-&gt;next;</span><br><span class="line">                cur-&gt;next = temp-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> temp;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-2-虚拟头结点"><a href="#2-2-虚拟头结点" class="headerlink" title="2.2 虚拟头结点"></a>2.2 虚拟头结点</h2><p>当对链表进行删除或插入操作时，从尾部&#x2F;头部&#x2F;中间对元素进行操作，操作方法不同，定义虚拟头结点可以统一操作，只要最后将虚拟头结点的下一个元素赋给头结点，就能返回新的头结点。</p><blockquote><ol><li>头结点是在第一个节点前额外添加的一个节点，头结点的主要作用是使链表的操作统一，即无论是在链表的头部、中间还是尾部进行操作，都可以通过统一的方式进行。头结点的下一个节点才是链表的<strong>第一个真正存储数据的节点（头节点&#x2F;首元节点）</strong>。</li><li>单链表的删除操作需要找到指向目标元素的前一个元素的指针才能进行删除。</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">            ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">listNode</span>(<span class="number">0</span>);<span class="comment">//定义一个虚拟头结点</span></span><br><span class="line">            dummyHead-&gt;next = head;<span class="comment">//虚拟头结点指向head</span></span><br><span class="line">            ListNode* cur = dummyHead;</span><br><span class="line">            <span class="keyword">while</span>(cur-&gt;next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;next-&gt;val == val)&#123;</span><br><span class="line">                    ListNode* temp = cur-&gt;next;</span><br><span class="line">                    cur-&gt;next = temp-&gt;next;</span><br><span class="line">                    <span class="keyword">delete</span> temp;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cur = cur-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head = dummyHead-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> dummyHead;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-3-双指针"><a href="#2-3-双指针" class="headerlink" title="2.3 双指针"></a>2.3 双指针</h2><p>设置两个指向头节点的指针，cur指向当前节点，pre记录待删除节点的前一个节点；遍历链表，找到目标 val，则删除节点 pre-&gt;next &#x3D; cur -&gt;next，未找到 pre 指向 cur 指向的节点，cur 后移。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(head != <span class="literal">nullptr</span> &amp;&amp; head-&gt;val == val)&#123;</span><br><span class="line">                ListNode* temp = head;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode* cur = head;</span><br><span class="line">            ListNode* pre = head;</span><br><span class="line">            <span class="keyword">while</span>(cur != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;val == val)&#123;</span><br><span class="line">                    pre-&gt;next = cur-&gt;next;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    pre = cur;</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="3-设计链表"><a href="#3-设计链表" class="headerlink" title="3. 设计链表"></a>3. 设计链表</h1><p>题目链接：<a href="https://leetcode.cn/problems/design-linked-list/">LeetCode 707. 设计链表</a></p><p>题目：单链表中的节点应该具备两个属性：<code>val</code> 和 <code>next</code> 。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针&#x2F;引用。设计并实现自己的链表。</p><p>实现 <code>MyLinkedList</code> 类：</p><ul><li><code>MyLinkedList()</code> 初始化 <code>MyLinkedList</code> 对象。</li><li><code>int get(int index)</code> 获取链表中下标为 <code>index</code> 的节点的值。如果下标无效，则返回 <code>-1</code> 。</li><li><code>void addAtHead(int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li><li><code>void addAtTail(int val)</code> 将一个值为 <code>val</code> 的节点追加到链表中作为链表的最后一个元素。</li><li><code>void addAtIndex(int index, int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中下标为 <code>index</code> 的节点之前。如果 <code>index</code> 等于链表的长度，那么该节点会被追加到链表的末尾。如果 <code>index</code> 比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li><li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为 <code>index</code> 的节点。</li></ul><table><thead><tr><th align="center">get( )</th><th align="center">addAtIndex( )</th></tr></thead><tbody><tr><td align="center"><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2Fd5f94468229e2c01c8cc2f7f87e6ec76-image-20240620221122997.png" alt="image-20240620221122997" style="zoom: 43%;" /></td><td align="center"><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2F80fbe45ffff15dffc5249c5749d5dabe-image-20240620221045700.png" alt="image-20240620221045700" style="zoom: 43%;" /></td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//定义链表</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkedNode</span>&#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        LinkedNode* next;</span><br><span class="line">        <span class="built_in">LinkedNode</span>(<span class="type">int</span> val) : <span class="built_in">val</span>(val),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//定义一个虚拟头结点</span></span><br><span class="line">    LinkedNode* dummyHead;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        dummyHead = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(<span class="number">0</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取下标为 index 的节点的数值，如果 index 大于等于链表长度或小于零，返回-1</span></span><br><span class="line">    <span class="comment">//index 从0开始</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= size || index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedNode* cur = dummyHead-&gt;next;</span><br><span class="line">        <span class="comment">//index-- ,while 先进行循环判断，再执行 index 自减</span></span><br><span class="line">        <span class="comment">//循环 index 次，cur最终指向下标为 index 的节点的前一个节点</span></span><br><span class="line">        <span class="keyword">while</span>(index--)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//头插法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedNode* newNode = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        newNode-&gt;next = dummyHead-&gt;next;</span><br><span class="line">        dummyHead-&gt;next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//尾插法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedNode* newNode = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        LinkedNode* cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//插入下标为 index 的节点之前</span></span><br><span class="line">    <span class="comment">//index 大于链表长度则直接返回，小于0则插入链表开头成为新的头节点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedNode* newNode = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        LinkedNode* cur = dummyHead;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(index--)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除节点，index 大于等于链表长度或小于零</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        LinkedNode* cur = dummyHead;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= size || index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(index--)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedNode* tmp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = tmp-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">        tmp = <span class="literal">nullptr</span>;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="4-反转链表"><a href="#4-反转链表" class="headerlink" title="4. 反转链表"></a>4. 反转链表</h1><p>题目链接：<a href="https://leetcode.cn/problems/reverse-linked-list/">LeetCode 206. 反转链表</a></p><p>题目：给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2Fcfd1158fb4efc574929e0be13f236e54-image-20240622193945831.png" alt="image-20240622193945831" style="zoom: 43%;" /><h2 id="4-1-双指针法"><a href="#4-1-双指针法" class="headerlink" title="4.1 双指针法"></a>4.1 双指针法</h2><p>定义两个指针，使用临时指针 tmp 保存cur-&gt;next，即 cur 的下一个节点，将 cur 的 next 指针域指向 pre 反转第一个节点，移动 pre 指向 cur ，再将 cur 移动。重复上述过程，直到 cur 指针指向null 。</p><table><thead><tr><th></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2Fa068fa3c1831950450436ddb9b4b59c5-image-20240622200244928.png" alt="image-20240622200244928" style="zoom:43%;" /></td><td align="center"><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2F9573206f326399c48a2b9e6622a149a3-image-20240622203059079.png" alt="image-20240622203059079" style="zoom:43%;" /></td><td align="center"><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2F4799e1086611a555f0fae62e3c2ceff4-image-20240622200545044.png" alt="image-20240622200545044" style="zoom:43%;" /></td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            ListNode* tmp = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-2-递归"><a href="#4-2-递归" class="headerlink" title="4.2 递归"></a>4.2 递归</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* pre,ListNode* cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">NULL</span>) <span class="keyword">return</span> pre;<span class="comment">//z</span></span><br><span class="line">        ListNode* temp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        <span class="comment">// 可以和双指针法的代码进行对比，如下递归的写法，其实就是做了这两步</span></span><br><span class="line">        <span class="comment">// pre = cur;</span></span><br><span class="line">        <span class="comment">// cur = temp;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse</span>(cur,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 和双指针法初始化是一样的逻辑</span></span><br><span class="line">        <span class="comment">// ListNode* cur = head;</span></span><br><span class="line">        <span class="comment">// ListNode* pre = NULL;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse</span>(<span class="literal">NULL</span>, head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="5-两两交换链表中的节点"><a href="#5-两两交换链表中的节点" class="headerlink" title="5. 两两交换链表中的节点"></a>5. 两两交换链表中的节点</h1><p>题目链接：<a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">LeetCode 24. 两两交换链表中的节点</a></p><p>题目：给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即只能进行节点交换）。</p><p>双指针，使用虚拟头节点统一操作（不用每次单独对头节点进行操作）；具体思路见下图：</p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2Fb017886122c5d1c60e79e83cdbb3bf06-image-20240623230821248.png" alt="image-20240623230821248" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line">        ListNode* cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;next-&gt;next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ListNode* tmp = cur-&gt;next;</span><br><span class="line">            ListNode* tmp1 = cur-&gt;next-&gt;next-&gt;next;</span><br><span class="line">            cur-&gt;next = tmp-&gt;next;<span class="comment">//步骤一</span></span><br><span class="line">            tmp-&gt;next-&gt;next = tmp;<span class="comment">//步骤二</span></span><br><span class="line">            tmp-&gt;next = tmp1;<span class="comment">//步骤三</span></span><br><span class="line">            cur = cur-&gt;next-&gt;next;<span class="comment">//cur 后移两位</span></span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* result = dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummyHead;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="6-删除链表的倒数第-N-个节点"><a href="#6-删除链表的倒数第-N-个节点" class="headerlink" title="6. 删除链表的倒数第 N 个节点"></a>6. 删除链表的倒数第 N 个节点</h1><p>题目链接：<a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">LeetCode 19. 删除链表的倒数第 N 个结点</a></p><p>题目：给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。<code>1 &lt;= n &lt;= size</code>（size 为链表节点数）</p><p>使用虚拟头节点统一删除操作；定义两个指针，slow 和 fast，先让 fast 移动 n 个节点，然后 fast 和 slow 同时移动，当 fast 指向 NULL 时，slow 指针指向的节点即为倒数第 n 个节点；由于单链表删除需要找到待删除节点的前一个节点，所以先让 fast 移动 n+1 次，这样 slow 最后指向的就是目标节点的前一个节点，方便删除。具体思路如下图：</p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2F75ca428495c79d2bb05f3fde31d2fd10-image-20240624204345384.png" alt="image-20240624204345384" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line">        ListNode* fast = dummyHead;</span><br><span class="line">        ListNode* slow  = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next!=<span class="literal">nullptr</span> &amp;&amp; n--)&#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tmp = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = tmp-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="7-链表相交"><a href="#7-链表相交" class="headerlink" title="7. 链表相交"></a>7. 链表相交</h1><p>题目链接：<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">LeetCode 面试题 02.07 链表相交</a></p><p>题目：给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2F14bfbafc6062318641e32d8fb267369e-image-20240627211109942.png" alt="image-20240627211109942" style="zoom: 50%;" /><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。<strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><h2 id="7-1-双指针"><a href="#7-1-双指针" class="headerlink" title="7.1 双指针"></a>7.1 双指针</h2><p>假设两个链表相交的第一个节点为 <code>node</code>；<code>A</code> 有 a 个节点，<code>B</code> 有 b 个节点，公共部分有 <code>C</code> 个节点。</p><p>则指针 A 遍历完链表 <code>headA</code> 后，遍历链表 <code>headB</code> ，当指向 <code>node</code> 时，步长为 a+(b-c)；</p><p>指针 B 遍历完链表 <code>headB</code> 后，遍历链表 <code>headA</code>，当指向 <code>node</code> 时，步长为 b+(a-c)；</p><p>即若两个链表相交，按上述步骤两个指针指向同一个节点时走过的步长相同，且一定是指向公共部分的起始节点。</p><p>时间复杂度：O(a+b)；空间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode* A = headA;</span><br><span class="line">        ListNode* B = headB;</span><br><span class="line">        <span class="keyword">while</span>(A != B)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                A = A-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                A = headB;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(B != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                B = B-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                B = headA;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="7-2-哈希集合"><a href="#7-2-哈希集合" class="headerlink" title="7.2 哈希集合"></a>7.2 哈希集合</h2><p>使用哈希集合存储链表节点，遍历链表 <code>headA</code> 将链表中的节点存储到哈希集合中；然后遍历链表 <code>headB</code> ，如果链表 <code>headB</code> 的节点在哈希集合中，即两个链表相交，当前节点为相交的第一个节点；如果不在哈希集合中，继续遍历下个节点；都不在则说明链表不相交，返回 <code>nullptr</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;ListNode *&gt; hashSet;</span><br><span class="line">        ListNode *tmp = headA;</span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            hashSet.<span class="built_in">insert</span>(tmp);</span><br><span class="line">            tmp = tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = headB;</span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashSet.<span class="built_in">count</span>(tmp)) &#123;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="8-环形链表"><a href="#8-环形链表" class="headerlink" title="8. 环形链表 ||"></a>8. 环形链表 ||</h1><p>题目链接：<a href="https://leetcode.cn/problems/linked-list-cycle-ii/">LeetCode 142. 环形链表 ||</a></p><p>题目：给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2Ff9532d6f7a2791c007bcf84c4a5e585d-image-20240629213839289.png" alt="image-20240629213839289" style="zoom: 50%;" /><h2 id="8-1-哈希表法"><a href="#8-1-哈希表法" class="headerlink" title="8.1 哈希表法"></a>8.1 哈希表法</h2><p>遍历链表，利用哈希表存储链表上的节点，如果哈希表中已经保存了对应的节点，说明之前遍历过该节点，即链表有环。</p><p>时间复杂度：O(n)，空间复杂度：O(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//常规的判断环的方法</span></span><br><span class="line">        unordered_set&lt;ListNode*&gt; hasSet;</span><br><span class="line">        ListNode* tmp = head;</span><br><span class="line">        <span class="keyword">while</span>(tmp != <span class="literal">nullptr</span> )&#123;</span><br><span class="line">            <span class="keyword">if</span>(hasSet.<span class="built_in">count</span>(tmp))&#123;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            hasSet.<span class="built_in">insert</span>(tmp);</span><br><span class="line">            tmp = tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="8-2-双指针法"><a href="#8-2-双指针法" class="headerlink" title="8.2 双指针法"></a>8.2 双指针法</h2><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8_image%2Fdffa8b622c5c7d2b2c092323c036b2a6-image-20240629214932986.png" alt="image-20240629214932986" style="zoom:50%;" /><p>假设链表头部到环入口有 a 个节点，链表中环有 b 个节点。设两个指针 <code>fast</code> 和 <code>slow</code> ，<code>fast</code> 一次走两步，<code>slow</code> 一次走一步；如果存在环，那么 <code>fast</code> 一定会在某时和 <code>slow</code> 相遇；设相遇时俩指针分别走了 f 步、s 步。</p><p>两个指针相遇，<code>fast</code> 一定比 <code>slow</code> 多走了环的长度的 n 倍 ，f &#x3D; s + nb；又 <code>fats</code> 每次比 <code>slow</code> 多走一步，f &#x3D; 2s。</p><p>由上述两式可得 f &#x3D; 2nb ; s &#x3D; nb。</p><p>又节点从头节点出发走 a + nb 步一定会回到环的入口节点处，此时 <code>slow</code> 指针走了 nb 步，只要再走 a 步就可以回到环的入口节点处，但 a 的值不确定，不过可以注意到从链表头节点到环的入口节点的距离刚好为 a ，此时只要新建一个指针从头节点出发，和 <code>slow</code> 指针同时前进，二者会在环的入口节点相遇。</p><p>时间复杂度：O(n)，空间复杂度：O(1)</p><blockquote><p>这类判定链表环的问题 1. 可以用哈希表 2. 它类似于操场追赶问题，甲比乙跑得快，只要操场是环，那么甲最终一定会追上乙，等价为只要甲乙能相遇就存在环（<strong>甲乙同时出发</strong>）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        <span class="comment">//这里的 while 循环也是一种判断环的写法</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="literal">nullptr</span> || fast-&gt;next == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span>(slow != cur)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> cur;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p>[1] <a href="https://www.programmercarl.com/%E9%93%BE%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">代码随想录 - 链表理论基础</a></p></li><li><p>[2] <a href="https://www.hello-algo.com/chapter_array_and_linkedlist/linked_list/">Hello 算法 - 链表 </a></p></li><li><p>[3] <a href="https://algo.itcharge.cn/02.Linked-List/01.Linked-List-Basic/01.Linked-List-Basic/">算法通关手册 - 链表基础知识</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2024/04/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/"/>
      <url>/2024/04/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数组：一种线性表存储结构，使用一组连续的存储空间，可以随机存取；与数组有关的题常可用双指针、滑动窗口解决。</p></blockquote><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><p>使用两个指针对元素进行遍历，方向相同——快慢指针；方向相反——对撞指针；两个指针属于不同的数组&#x2F;链表——分离双指针。</p><h2 id="1-对撞指针"><a href="#1-对撞指针" class="headerlink" title="1. 对撞指针"></a>1. 对撞指针</h2><p>left、right 两个指针分别指向数组第一个元素和最后一个元素，当满足一定条件时，左指针右移&#x2F;右指针左移，当两指针相撞（left &#x3D;&#x3D; right）或者满足查询条件时，跳出循环。</p><p>一般适用于在一些约束条件下查找数组中元素问题；字符串反转问题。</p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84_image%2F11759752dc75aabcb00253a98b0362ce-image-20240408224639642.png" alt="image-20240408224639642" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> left &lt; right:</span><br><span class="line">    <span class="keyword">if</span> 满足要求的特殊条件:</span><br><span class="line">        <span class="keyword">return</span> 符合条件的值 </span><br><span class="line">    elif 条件 <span class="number">1</span>:</span><br><span class="line">        left += <span class="number">1</span></span><br><span class="line">    elif 条件 <span class="number">2</span>:</span><br><span class="line">        right -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> 没找到</span><br></pre></td></tr></table></figure><h2 id="2-快慢指针"><a href="#2-快慢指针" class="headerlink" title="2. 快慢指针"></a>2. 快慢指针</h2><p>两个指针以不同的速度移动（由一定条件决定），当快指针移动到尾端或满足其他条件时跳出循环。常用于解决数组元素移动或删除问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">slow = <span class="number">0</span></span><br><span class="line">fast = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> 没有遍历完：</span><br><span class="line">    <span class="keyword">if</span> 满足要求的特殊条件:</span><br><span class="line">        slow += <span class="number">1</span></span><br><span class="line">    fast += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> 合适的值</span><br></pre></td></tr></table></figure><h2 id="3-分离双指针"><a href="#3-分离双指针" class="headerlink" title="3. 分离双指针"></a>3. 分离双指针</h2><p>两个指针分别在两个数组中移动；数组合并或者交并集问题。</p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84_image%2F1db8a99ea9671630074a9d76af0b7332-image-20240408232559574.png" alt="image-20240408232559574" style="zoom:33%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">left_1 = <span class="number">0</span></span><br><span class="line">left_2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> left_1 &lt; len(nums1) and left_2 &lt; len(nums2):</span><br><span class="line">    <span class="keyword">if</span> 一定条件 <span class="number">1</span>:</span><br><span class="line">        left_1 += <span class="number">1</span></span><br><span class="line">        left_2 += <span class="number">1</span></span><br><span class="line">    elif 一定条件 <span class="number">2</span>:</span><br><span class="line">        left_1 += <span class="number">1</span></span><br><span class="line">    elif 一定条件 <span class="number">3</span>:</span><br><span class="line">        left_2 += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><p><strong>滑动窗口算法（Sliding Window）</strong>：在给定数组 &#x2F; 字符串上维护一个固定长度或不定长度的窗口。可以对窗口进行滑动操作、缩放操作，以及维护最优解操作。</p><ul><li><strong>滑动操作</strong>：窗口可按照一定方向进行移动。最常见的是向右侧移动。</li><li><strong>缩放操作</strong>：对于不定长度的窗口，可以从左侧缩小窗口长度，也可以从右侧增大窗口长度。</li></ul><p>滑动窗口利用了双指针中的快慢指针技巧，我们可以将滑动窗口看做是快慢指针两个指针中间的区间，也可以将滑动窗口看做是快慢指针的一种特殊形式</p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84_image%2F44663cdd4ab46a0611c629008e1f8434-image-20240410223336612.png" alt="image-20240410223336612" style="zoom: 45%;" /><h2 id="1-定长滑动窗口"><a href="#1-定长滑动窗口" class="headerlink" title="1. 定长滑动窗口"></a>1. 定长滑动窗口</h2><h2 id="2-不定长滑动窗口"><a href="#2-不定长滑动窗口" class="headerlink" title="2. 不定长滑动窗口"></a>2. 不定长滑动窗口</h2><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="1-二分法（对撞指针）"><a href="#1-二分法（对撞指针）" class="headerlink" title="1. 二分法（对撞指针）"></a>1. 二分法（对撞指针）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (left + right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[middle] &lt; target)&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[middle] &gt; target)&#123;</span><br><span class="line">            right = middle -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h1><p><code>题目</code>：给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><ul><li><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong>。</p></li><li><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p></li></ul><h2 id="1-暴力法"><a href="#1-暴力法" class="headerlink" title="1. 暴力法"></a>1. 暴力法</h2><p>两个 For 循环，一个遍历数组，一个更新数组。</p><p>找到目标元素后，元素前移覆盖以达到删除的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到目标元素并删除，返回删除后数组长度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == val)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;j&lt;size;j++)&#123;</span><br><span class="line">                nums[j - <span class="number">1</span>] = nums[j];</span><br><span class="line">                i--;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-双指针法（快慢指针）"><a href="#2-双指针法（快慢指针）" class="headerlink" title="2. 双指针法（快慢指针）"></a>2. 双指针法（快慢指针）</h2><p><strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><p>快指针：寻找目标元素</p><p>慢指针：记录、更新数组下标位置；当目标元素与当前元素不同时，与快指针一同移动；相同时，快指针后移一位，慢指针不动，然后让快指针指向的数组赋给慢指针指向的数组来达到一个覆盖数据的作用</p><p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84_image%2Feed701af14362053380da4bd30c3c48e-202404072239937.gif" alt="27.移除元素-双指针法"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//并不改变元素的相对位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">slowIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">fastIndex</span> <span class="operator">=</span> <span class="number">0</span>; fastIndex &lt; nums.length; fastIndex++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fastIndex] != val)&#123;</span><br><span class="line">            nums[slowIndex] = nums[fastIndex];</span><br><span class="line">            slowIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slowIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化，相向双指针</span></span><br></pre></td></tr></table></figure><h1 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h1><h2 id="双指针（对撞指针）"><a href="#双指针（对撞指针）" class="headerlink" title="双指针（对撞指针）"></a>双指针（对撞指针）</h2><p>题目链接：<a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">https://leetcode.cn/problems/squares-of-a-sorted-array/</a></p><p>题目：<strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p>数组有序，但数组中可能存在负数，平方后可能成为最大数，又有序数组平方后最大值是在数组两端，所以可以考虑双指针，将平方后元素存入新数组。</p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84_image%2Fa2c3201cb860de563f0f02b243430a12-image-20240411135831786.png" alt="image-20240411135831786" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] A = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="comment">//两边端点的平方比较</span></span><br><span class="line">        <span class="keyword">if</span>(nums[left] &lt; <span class="number">0</span> &amp;&amp; nums[left] * nums[left] &gt; nums[right] * nums[right])&#123;</span><br><span class="line">            A[index] = nums[left] * nums[left];</span><br><span class="line">            index --;</span><br><span class="line">            left ++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            A[index] = nums[right]*nums[right];</span><br><span class="line">            index --;</span><br><span class="line">            right --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h1><p>题目链接：<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">https://leetcode.cn/problems/minimum-size-subarray-sum/</a></p><p>题目：给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续</strong>子数组，<code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p><h2 id="滑动窗口-不定长"><a href="#滑动窗口-不定长" class="headerlink" title="滑动窗口(不定长)"></a>滑动窗口(不定长)</h2><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84_image%2F41f2ccce2c24726e8fdbe3b3a10e1076-209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif" alt="209.长度最小的子数组" style="zoom: 67%;" /><p>用两个指针确定一个范围，通过指针的移动调整窗口大小，当窗口大小满足条件（ &gt; target ）,缩小窗口（起始位置移动）；遍历数组的指针代表窗口的结束位置。</p><p>即定义两个指针（left,right）表示窗口的开始位置和结束位置,初始状态，指针索引都为 0 ，将 nums[right] 累加到 sum ,当 sum &gt; target ，sum 减去 nums[left] 值，起始位置右移（left ++ ; 窗口缩小）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> nums.length + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;right&lt;nums.length;right++)&#123;</span><br><span class="line">        sum += nums[right];</span><br><span class="line">        <span class="keyword">while</span>(sum &gt;= target)&#123;</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            int length = right - left + 1;</span></span><br><span class="line"><span class="comment">            if(result &gt; length)&#123;</span></span><br><span class="line"><span class="comment">                result = length;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">            result = Math.min(result,right - left + <span class="number">1</span>);</span><br><span class="line">            sum = sum - nums[left]; </span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//result 值不变代表不存在符合条件的子数组，即数组元素全部相加的值小于目标值</span></span><br><span class="line">    <span class="keyword">if</span>(result == nums.length + <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
