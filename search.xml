<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数组</title>
      <link href="/2024/04/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/"/>
      <url>/2024/04/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数组：一种线性表存储结构，使用一组连续的存储空间，可以随机存取；与数组有关的题常可用双指针、滑动窗口解决。</p></blockquote><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><p>使用两个指针对元素进行遍历，方向相同——快慢指针；方向相反——对撞指针；两个指针属于不同的数组&#x2F;链表——分离双指针。</p><h2 id="1-对撞指针"><a href="#1-对撞指针" class="headerlink" title="1. 对撞指针"></a>1. 对撞指针</h2><p>left、right 两个指针分别指向数组第一个元素和最后一个元素，当满足一定条件时，左指针右移&#x2F;右指针左移，当两指针相撞（left &#x3D;&#x3D; right）或者满足查询条件时，跳出循环。</p><p>一般适用于在一些约束条件下查找数组中元素问题；字符串反转问题。</p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84_image%2F11759752dc75aabcb00253a98b0362ce-image-20240408224639642.png" alt="image-20240408224639642" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> left &lt; right:</span><br><span class="line">    <span class="keyword">if</span> 满足要求的特殊条件:</span><br><span class="line">        <span class="keyword">return</span> 符合条件的值 </span><br><span class="line">    elif 条件 <span class="number">1</span>:</span><br><span class="line">        left += <span class="number">1</span></span><br><span class="line">    elif 条件 <span class="number">2</span>:</span><br><span class="line">        right -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> 没找到</span><br></pre></td></tr></table></figure><h2 id="2-快慢指针"><a href="#2-快慢指针" class="headerlink" title="2. 快慢指针"></a>2. 快慢指针</h2><p>两个指针以不同的速度移动（由一定条件决定），当快指针移动到尾端或满足其他条件时跳出循环。常用于解决数组元素移动或删除问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">slow = <span class="number">0</span></span><br><span class="line">fast = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> 没有遍历完：</span><br><span class="line">    <span class="keyword">if</span> 满足要求的特殊条件:</span><br><span class="line">        slow += <span class="number">1</span></span><br><span class="line">    fast += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> 合适的值</span><br></pre></td></tr></table></figure><h2 id="3-分离双指针"><a href="#3-分离双指针" class="headerlink" title="3. 分离双指针"></a>3. 分离双指针</h2><p>两个指针分别在两个数组中移动；数组合并或者交并集问题。</p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84_image%2F1db8a99ea9671630074a9d76af0b7332-image-20240408232559574.png" alt="image-20240408232559574" style="zoom:33%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">left_1 = <span class="number">0</span></span><br><span class="line">left_2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> left_1 &lt; len(nums1) and left_2 &lt; len(nums2):</span><br><span class="line">    <span class="keyword">if</span> 一定条件 <span class="number">1</span>:</span><br><span class="line">        left_1 += <span class="number">1</span></span><br><span class="line">        left_2 += <span class="number">1</span></span><br><span class="line">    elif 一定条件 <span class="number">2</span>:</span><br><span class="line">        left_1 += <span class="number">1</span></span><br><span class="line">    elif 一定条件 <span class="number">3</span>:</span><br><span class="line">        left_2 += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><p><strong>滑动窗口算法（Sliding Window）</strong>：在给定数组 &#x2F; 字符串上维护一个固定长度或不定长度的窗口。可以对窗口进行滑动操作、缩放操作，以及维护最优解操作。</p><ul><li><strong>滑动操作</strong>：窗口可按照一定方向进行移动。最常见的是向右侧移动。</li><li><strong>缩放操作</strong>：对于不定长度的窗口，可以从左侧缩小窗口长度，也可以从右侧增大窗口长度。</li></ul><p>滑动窗口利用了双指针中的快慢指针技巧，我们可以将滑动窗口看做是快慢指针两个指针中间的区间，也可以将滑动窗口看做是快慢指针的一种特殊形式</p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84_image%2F44663cdd4ab46a0611c629008e1f8434-image-20240410223336612.png" alt="image-20240410223336612" style="zoom: 45%;" /><h2 id="1-定长滑动窗口"><a href="#1-定长滑动窗口" class="headerlink" title="1. 定长滑动窗口"></a>1. 定长滑动窗口</h2><h2 id="2-不定长滑动窗口"><a href="#2-不定长滑动窗口" class="headerlink" title="2. 不定长滑动窗口"></a>2. 不定长滑动窗口</h2><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="1-二分法（对撞指针）"><a href="#1-二分法（对撞指针）" class="headerlink" title="1. 二分法（对撞指针）"></a>1. 二分法（对撞指针）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (left + right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[middle] &lt; target)&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[middle] &gt; target)&#123;</span><br><span class="line">            right = middle -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h1><p><code>题目</code>：给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><ul><li><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong>。</p></li><li><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p></li></ul><h2 id="1-暴力法"><a href="#1-暴力法" class="headerlink" title="1. 暴力法"></a>1. 暴力法</h2><p>两个 For 循环，一个遍历数组，一个更新数组。</p><p>找到目标元素后，元素前移覆盖以达到删除的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到目标元素并删除，返回删除后数组长度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == val)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;j&lt;size;j++)&#123;</span><br><span class="line">                nums[j - <span class="number">1</span>] = nums[j];</span><br><span class="line">                i--;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-双指针法（快慢指针）"><a href="#2-双指针法（快慢指针）" class="headerlink" title="2. 双指针法（快慢指针）"></a>2. 双指针法（快慢指针）</h2><p><strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><p>快指针：寻找目标元素</p><p>慢指针：记录、更新数组下标位置；当目标元素与当前元素不同时，与快指针一同移动；相同时，快指针后移一位，慢指针不动，然后让快指针指向的数组赋给慢指针指向的数组来达到一个覆盖数据的作用</p><p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84_image%2Feed701af14362053380da4bd30c3c48e-202404072239937.gif" alt="27.移除元素-双指针法"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//并不改变元素的相对位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">slowIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">fastIndex</span> <span class="operator">=</span> <span class="number">0</span>; fastIndex &lt; nums.length; fastIndex++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fastIndex] != val)&#123;</span><br><span class="line">            nums[slowIndex] = nums[fastIndex];</span><br><span class="line">            slowIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slowIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化，相向双指针</span></span><br></pre></td></tr></table></figure><h1 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h1><h2 id="双指针（对撞指针）"><a href="#双指针（对撞指针）" class="headerlink" title="双指针（对撞指针）"></a>双指针（对撞指针）</h2><p>题目链接：<a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">https://leetcode.cn/problems/squares-of-a-sorted-array/</a></p><p>题目：<strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p>数组有序，但数组中可能存在负数，平方后可能成为最大数，又有序数组平方后最大值是在数组两端，所以可以考虑双指针，将平方后元素存入新数组。</p><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84_image%2Fa2c3201cb860de563f0f02b243430a12-image-20240411135831786.png" alt="image-20240411135831786" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] A = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="comment">//两边端点的平方比较</span></span><br><span class="line">        <span class="keyword">if</span>(nums[left] &lt; <span class="number">0</span> &amp;&amp; nums[left] * nums[left] &gt; nums[right] * nums[right])&#123;</span><br><span class="line">            A[index] = nums[left] * nums[left];</span><br><span class="line">            index --;</span><br><span class="line">            left ++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            A[index] = nums[right]*nums[right];</span><br><span class="line">            index --;</span><br><span class="line">            right --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h1><p>题目链接：<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">https://leetcode.cn/problems/minimum-size-subarray-sum/</a></p><p>题目：给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续</strong>子数组，<code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p><h2 id="滑动窗口-不定长"><a href="#滑动窗口-不定长" class="headerlink" title="滑动窗口(不定长)"></a>滑动窗口(不定长)</h2><img src="https://blog-for-picture.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84_image%2F41f2ccce2c24726e8fdbe3b3a10e1076-209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif" alt="209.长度最小的子数组" style="zoom: 67%;" /><p>用两个指针确定一个范围，通过指针的移动调整窗口大小，当窗口大小满足条件（ &gt; target ）,缩小窗口（起始位置移动）；遍历数组的指针代表窗口的结束位置。</p><p>即定义两个指针（left,right）表示窗口的开始位置和结束位置,初始状态，指针索引都为 0 ，将 nums[right] 累加到 sum ,当 sum &gt; target ，sum 减去 nums[left] 值，起始位置右移（left ++ ; 窗口缩小）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> nums.length + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;right&lt;nums.length;right++)&#123;</span><br><span class="line">        sum += nums[right];</span><br><span class="line">        <span class="keyword">while</span>(sum &gt;= target)&#123;</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            int length = right - left + 1;</span></span><br><span class="line"><span class="comment">            if(result &gt; length)&#123;</span></span><br><span class="line"><span class="comment">                result = length;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">            result = Math.min(result,right - left + <span class="number">1</span>);</span><br><span class="line">            sum = sum - nums[left]; </span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//result 值不变代表不存在符合条件的子数组，即数组元素全部相加的值小于目标值</span></span><br><span class="line">    <span class="keyword">if</span>(result == nums.length + <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
